version: "3.9"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ofm-postgres
    environment:
      POSTGRES_USER: ofm
      POSTGRES_PASSWORD: ofm_dev_password
      POSTGRES_DB: ofm_marketing
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ofm -d ofm_marketing"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - ofm-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ofm-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - ofm-network

  # Temporal Server
  temporal:
    image: temporalio/auto-setup:1.24.2
    container_name: ofm-temporal
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=ofm
      - POSTGRES_PWD=ofm_dev_password
      - POSTGRES_SEEDS=postgres
      - TEMPORAL_BROADCAST_ADDRESS=temporal
      - ENABLE_ES=false
    ports:
      - "7233:7233"
    healthcheck:
      test: ["CMD", "temporal", "operator", "namespace", "list"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks:
      - ofm-network

  # Temporal Web UI
  temporal-ui:
    image: temporalio/ui:2.28.0
    container_name: ofm-temporal-ui
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    ports:
      - "8233:8080"
    networks:
      - ofm-network

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: ofm-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_DEFAULT_BUCKETS: ofm-media:public,ofm-backups:private
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - ofm-network

  # MinIO Client (for bucket creation)
  minio-client:
    image: minio/mc:latest
    container_name: ofm-minio-client
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 minioadmin minioadmin;
      mc mb -p minio/ofm-media;
      mc mb -p minio/ofm-backups;
      mc anonymous set public minio/ofm-media;
      exit 0;
      "
    networks:
      - ofm-network

  # Prometheus (optional - for metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: ofm-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./ops/monitoring/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    networks:
      - ofm-network
    profiles:
      - monitoring

  # Grafana (optional - for dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: ofm-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - ./ops/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./ops/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - ofm-network
    profiles:
      - monitoring

  # OpenTelemetry Collector (optional)
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: ofm-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./ops/monitoring/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
    networks:
      - ofm-network
    profiles:
      - monitoring

networks:
  ofm-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data: