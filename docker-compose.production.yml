version: "3.9"

services:
  # Frontend (Next.js)
  frontend:
    build:
      context: ./site-web
      dockerfile: Dockerfile
    container_name: ofm-frontend
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - NEXT_PUBLIC_API_BASE=https://api.yourdomain.com
    ports:
      - "3000:3000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ofm-network

  # Marketing API
  marketing-api:
    build:
      context: ./marketing/backend/api
      dockerfile: Dockerfile
    container_name: ofm-marketing-api
    env_file:
      - ./marketing/backend/api/.env
    ports:
      - "3001:3000"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ofm-network

  # Payment Service
  payment-api:
    build:
      context: ./payment
      dockerfile: Dockerfile
    container_name: ofm-payment-api
    env_file:
      - ./payment/.env.production
    ports:
      - "5000:5000"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ofm-network

  # Onboarding Service
  onboarding-api:
    build:
      context: ./onboarding
      dockerfile: Dockerfile
    container_name: ofm-onboarding-api
    env_file:
      - ./onboarding/.env
    ports:
      - "5001:5001"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ofm-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ofm-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-ofm}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-ofm_production}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ofm} -d ${POSTGRES_DB:-ofm_production}"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped
    networks:
      - ofm-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ofm-redis
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped
    networks:
      - ofm-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ofm-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./proxy_params:/etc/nginx/proxy_params:ro
      - ./ssl:/etc/letsencrypt:ro
      - ./.htpasswd:/etc/nginx/.htpasswd:ro
    depends_on:
      - frontend
      - marketing-api
      - payment-api
      - onboarding-api
    restart: unless-stopped
    networks:
      - ofm-network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: ofm-backup
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: ["sh", "-c", "while true; do /backup.sh; sleep 86400; done"]
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ofm-network

networks:
  ofm-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: